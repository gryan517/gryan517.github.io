[
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/third-and-sixth/index.html",
    "href": "posts/third-and-sixth/index.html",
    "title": "Third and Sixth Runs",
    "section": "",
    "text": "Today we are\n\n\nCode\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nlibrary(cfbfastR)\n\n\nLoad the play by play data from each season listed\n\n\nCode\nplays &lt;- load_cfb_pbp(seasons = c(2019, 2020, 2021, 2022, 2023))\n\n\n\n\nCode\nthird_and_six &lt;- plays |&gt; filter(down == 3, distance == 6)\n\n\nFind all plays where the down is 3 and the distance is 6, and save them to a new data frame called third_and_six.\n\n\nCode\nthird_and_six |&gt;\n  group_by(play_type, year) |&gt;\nsummarise(\n  count = n()\n)\n\n\n`summarise()` has grouped output by 'play_type'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 74 × 3\n# Groups:   play_type [19]\n   play_type                   year count\n   &lt;chr&gt;                      &lt;dbl&gt; &lt;int&gt;\n 1 Blocked Field Goal          2023     1\n 2 Field Goal Good             2019     2\n 3 Field Goal Good             2020     3\n 4 Field Goal Good             2021     2\n 5 Field Goal Good             2022     5\n 6 Field Goal Good             2023     1\n 7 Field Goal Missed           2019     1\n 8 Field Goal Missed           2021     2\n 9 Fumble Recovery (Opponent)  2019    17\n10 Fumble Recovery (Opponent)  2020    13\n# ℹ 64 more rows\n\n\nHow many plays were run plays (Rush and Rushing Touchdown)?\n\n\nCode\nruns &lt;- c(\"Rush\", \"Rushing Touchdown\")\n\nrunplays &lt;- third_and_six |&gt;\n  filter(play_type %in% runs) |&gt; \n  group_by(play_type, year)|&gt;\nsummarise(\n  total = n()\n)\n\n\n`summarise()` has grouped output by 'play_type'. You can override using the\n`.groups` argument.\n\n\nThis Saturday, Maryland’s homecoming game became a rapid defeat when they ran the ball on the third and sixth. These running plays are defined by rushes and rushing touchdowns.\nThere was an exponential spike in rushes in 2022 which grew from 483 in 2021 to 748 in 2022.In previous years, the amount of running plays has been fairly stable.\nWhile there is an overall trend for college coaches being fired mid season, 2021-2022 still remains to be a significant period to look at.\n“According to ESPN Stats & Information, there have been 36 Power 5 midseason coaching changes (any time before the conclusion of the regular season, not including bowl games) during the College Football Playoff era. Fourteen of those have occurred since the start of the 2021 season,” as according to ESPN.\nWhile notable increase in rushes is not directly related to changing coaches, it is a relationship worth exploring with the information provided."
  },
  {
    "objectID": "posts/md-football-ypp/index.html",
    "href": "posts/md-football-ypp/index.html",
    "title": "Maryland Football YPP Bubble Chart",
    "section": "",
    "text": "Code\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nlibrary(cfbfastR)\nlibrary(ggrepel)\n\n\n\n\nCode\nfootballlogs &lt;- read_csv (\"https://thescoop.org/sports-data-files/footballlogs1123.csv\")\n\n\nRows: 19934 Columns: 55\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (8): HomeAway, Opponent, Result, TeamFull, TeamURL, Outcome, Team, Con...\ndbl  (46): Game, PassingCmp, PassingAtt, PassingPct, PassingYds, PassingTD, ...\ndate  (1): Date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nMutating the wins and losses into numerical values of 1’s and 0’s.\n\n\nCode\nwinlosslogs &lt;- footballlogs |&gt; \n  mutate(\n    wins = case_when(\n      grepl(\"W\", Outcome) ~ 1, \n      grepl(\"L\", Outcome) ~ 0)\n)\n\n\nHere were calculating the amount of yards per play of each game for Maryland in each season.\n\n\nCode\nwinlosslogs |&gt; \n  group_by(Season) |&gt; \n  filter (TeamFull == \"Maryland Terrapins\") |&gt;\n  summarise(\n    TotalPlays = sum(OffensivePlays), \n    TotalYards = sum(OffensiveYards), \n    DefensivePlays = sum(DefPlays), \n    DefensiveYards = sum(DefYards), \n    TotalWins = sum(wins)) |&gt; \n  mutate(\n    OffensiveYPP = TotalYards/TotalPlays, \n    DefensiveYPP = DefensiveYards/DefensivePlays) -&gt; winlosslogs\n\n\n\n\nCode\ncurrentseason &lt;- winlosslogs |&gt; filter(Season == \"2023\")\n\n\n\n\nCode\nggplot() + \n  geom_point(\n    data=winlosslogs, \n    aes(x=OffensiveYPP, y=DefensiveYPP, size=TotalWins), \n    color=\"grey\", \n    alpha=.5) + \n  geom_point(\n    data=currentseason, \n    aes(x=OffensiveYPP, y=DefensiveYPP, size=TotalWins), \n    color=\"red\") +\n  geom_text_repel(\n    data=winlosslogs, \n    aes(x=OffensiveYPP, y=DefensiveYPP, label=Season)\n  ) +\n  labs(title=\"Will Maryland be rushing for wins?\", subtitle=\"Maryland is in a good position for a successful season.\", caption=\"Source: NCAA | By Gab Ryan\")  + theme_minimal() + \n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_text(size=10), \n    panel.grid.minor = element_blank()\n    )\n\n\n\n\n\nThe team is climbing to reach a higher amount of total wins, as seen in previous years (mitigating the pandemic year). We have yet to see if this year the team will match or surpass their amount of wins seen in previous years in the current year.\nIn the past 3 years more offensive yards per point has served as a potential aid to Maryland’s amount of wins. This makes sense, as the higher the amount of defensive yards per point climbs, the teams scores tend to be lower."
  },
  {
    "objectID": "posts/big-ten-cfb-plays/index.html",
    "href": "posts/big-ten-cfb-plays/index.html",
    "title": "Big Ten Plays",
    "section": "",
    "text": "Today we are creating a bar chart to show the average number of offensive plays for each Big Ten football team from the 2022-23 season and the current season.\n\n\nCode\nlibrary(tidyverse)\nlibrary(scales)\n\n\n##2022 Data\n\n\nCode\nfblogs &lt;- read_csv (\"https://dwillis.github.io/sports-data-files/footballlogs22.csv\")\n\n\nBased on the 2022 data set, filtering based on “Conference” will aid in viewing only the Big Ten Conference data. Then, find the average (or mean)\n\n\nCode\nbig10 &lt;- c(\"Big Ten Conference\")\n\nbig10conf &lt;- fblogs |&gt; filter(Conference %in% big10)\n\n\n\n\nCode\nbig10conf &lt;- big10conf |&gt; \n  group_by(Team) |&gt; \n  summarise(\n    avgoffplays = mean(OffensivePlays)) |&gt; \n  arrange(desc(avgoffplays))\n\n\n\n\nCode\nggplot() + \n  geom_bar(\n    data=big10conf, \n    aes(x=reorder(Team, avgoffplays), weight=avgoffplays)\n  )\n\n\n\n\n\n\n\nCode\nggplot() + \n  geom_bar(\n    data=big10conf, \n    aes(x=reorder(Team, avgoffplays), weight=avgoffplays)\n  ) + \n  scale_y_continuous(labels=comma) + \n  labs(\n    title=\"Iowa avergaes slow & steady, 2022\", \n    x=\"Team\", \n    y=\"Average Offensive Plays\") +\n  theme_minimal() +\n  coord_flip()\n\n\n\n\n\n##2023 Data\n\n\nCode\nfblogs2 &lt;- read_csv (\"https://dwillis.github.io/sports-data-files/footballlogs23.csv\")\n\n\n\n\nCode\nbig10 &lt;- c(\"Big Ten Conference\")\nbig10conf2 &lt;- fblogs2 |&gt; filter(Conference %in% big10)\n\n\n\n\nCode\nbig10conf2 &lt;- big10conf2 |&gt; \n  group_by(Team) |&gt; \n  summarise(\n    avgoffplays = mean(OffensivePlays)) |&gt; \n  arrange(desc(avgoffplays))\n\n\n\n\nCode\nggplot() + \n  geom_bar(\n    data=big10conf2, \n    aes(x=reorder(Team, avgoffplays), weight=avgoffplays)\n  )\n\n\n\n\n\n\n\nCode\nggplot() + \n  geom_bar(\n    data=big10conf2, \n    aes(x=reorder(Team, avgoffplays), weight=avgoffplays)\n  ) + \n  scale_y_continuous(labels=comma) + \n  labs(\n    title=\"Penn State's strong protect & pass game, 2023\", \n    x=\"Team\", \n    y=\"Average Offensive Plays\") +\n  theme_minimal() +\n  coord_flip()"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "jour479xsportsblog",
    "section": "",
    "text": "Volleyball aces per match\n\n\n\n\n\n\n\n\n\n\n\n\nOct 26, 2023\n\n\nGab Ryan\n\n\n\n\n\n\n  \n\n\n\n\nMaryland Football YPP Bubble Chart\n\n\n\n\n\n\n\n\n\n\n\n\nOct 25, 2023\n\n\nGab Ryan\n\n\n\n\n\n\n  \n\n\n\n\nThird and Sixth Runs\n\n\n\n\n\n\n\n\n\n\n\n\nOct 17, 2023\n\n\nGab Ryan\n\n\n\n\n\n\n  \n\n\n\n\nBig Ten Plays\n\n\n\n\n\n\n\n\n\n\n\n\nOct 10, 2023\n\n\nGab Ryan\n\n\n\n\n\n\n  \n\n\n\n\nHello World!\n\n\n\n\n\n\n\n\n\n\n\n\nOct 5, 2023\n\n\nGab Ryan\n\n\n\n\n\n\n  \n\n\n\n\nPost With Code\n\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nOct 5, 2023\n\n\nHarlow Malloc\n\n\n\n\n\n\n  \n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nOct 2, 2023\n\n\nTristan O’Malley\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/hello-world/index.html",
    "href": "posts/hello-world/index.html",
    "title": "Hello World!",
    "section": "",
    "text": "Welcome to this blog! Today we learned how to create this fun blog.\nLet’s do some coding.\n\n\nCode\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nlibrary(cluster)\n\nset.seed(1234)\n\n\n\n\nCode\nplayers &lt;- read_csv(\"https://dwillis.github.io/sports-data-files/players20.csv\")\n\n\nRows: 5452 Columns: 57\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (8): Team, Player, Class, Pos, Height, Hometown, High School, Summary\ndbl (49): #, Weight, Rk.x, G, GS, MP, FG, FGA, FG%, 2P, 2PA, 2P%, 3P, 3PA, 3...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\nCode\nplayersselected &lt;- players |&gt;\n  filter(MP&gt;0) |&gt; filter(Pos == \"F\") |&gt;\n  select(Player, Team, Pos, MP, `FG%`, TRB, BLK, TOV, PTS) |&gt;\n  na.omit()\n\n\n\n\nCode\nplayersscaled &lt;- playersselected |&gt;\n  select(MP, `FG%`, TRB, BLK, TOV, PTS) |&gt;\n  mutate_all(scale) |&gt;\n  na.omit()\n\n\n\n\nCode\n# function to compute total within-cluster sum of square\nwss &lt;- function(k) {\n  kmeans(playersscaled, k, nstart = 10 )$tot.withinss\n}\n\n# Compute and plot wss for k = 1 to k = 15\nk.values &lt;- 1:15\n\n# extract wss for 2-15 clusters\nwss_values &lt;- map_dbl(k.values, wss)\n\nplot(k.values, wss_values,\n       type=\"b\", pch = 19, frame = FALSE,\n       xlab=\"Number of clusters K\",\n       ylab=\"Total within-clusters sum of squares\")"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "posts/volleyball-aces/index.html",
    "href": "posts/volleyball-aces/index.html",
    "title": "Volleyball aces per match",
    "section": "",
    "text": "Code\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nlibrary(ggrepel)\nlibrary(ggbeeswarm)\nset.seed(1234)\n\n\n\n\nCode\nplaystats_2023 &lt;- read_csv (\"https://raw.githubusercontent.com/dwillis/NCAAWomensVolleyballData/main/data/ncaa_womens_volleyball_playerstats_2023.csv\")\n\n\nRows: 5133 Columns: 33\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (7): team, full_name, roster_name, last_name, first_name, yr, pos\ndbl (24): season, jersey, feet, inches, gp, gs, mp, s, kills, errors, total_...\nlgl  (2): ms, total_blocks\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\nCode\nactiveplayers &lt;- playstats_2023 |&gt; filter(!is.na(aces), !is.na(pos), mp &gt;= 20)\n\n\n\n\nCode\nactiveplayers &lt;- activeplayers |&gt; mutate(acespermatch=aces/mp)\nsummary(activeplayers$acespermatch)\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.0000  0.1818  0.6000  0.6143  0.9500  2.4000 \n\n\n\n\nCode\nplayeraces &lt;- activeplayers |&gt; filter(acespermatch &gt; .95)\n\n\n\n\nCode\nggplot() + geom_beeswarm(data=playeraces, aes(x=pos, y=acespermatch), color=\"grey\")\n\n\n\n\n\n\n\nCode\numd &lt;- activeplayers |&gt; \n  filter(team == \"Maryland Terrapins, Terps\") |&gt; \n  filter(acespermatch &gt; .95) |&gt; \n  arrange(desc(acespermatch))\n\n\n\n\nCode\nggplot() + \n  geom_beeswarm(\n    data=playeraces, \n    groupOnX=TRUE, \n    aes(x=pos, y=acespermatch), color=\"grey\") + \n  geom_beeswarm(\n    data=umd, \n    groupOnX=TRUE, \n    aes(x=pos, y=acespermatch), color=\"red\") +\n  labs(title=\"\", subtitle=\"\", caption=\"Source: NCAA | By Gab Ryan\") \n\n\nWarning: The `groupOnX` argument of `geom_beeswarm()` is deprecated as of ggbeeswarm\n0.7.1.\nℹ ggplot2 now handles this case automatically.\n\n\n\n\n\nThese payers played more than 20 matches, and are in the 3rd quartile in the number of aces per match."
  }
]